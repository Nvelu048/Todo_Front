{"version":3,"sources":["lib/NetworkClient.js","components/uicomponents/Button.tsx","components/uicomponents/Input.tsx","components/uicomponents/Select.tsx","components/uicomponents/Textarea.tsx","util/Labels.ts","util/Status.ts","util/Priority.ts","util/index.ts","screens/TodoForm.tsx","components/uicomponents/TodoItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["axios","require","NetworkClient","instance","create","this","baseURL","sharedInstance","Button","props","style","display","position","width","height","borderRadius","background","bottom","right","alignItems","justifyContent","userSelect","border","outline","onClick","fontSize","color","textAlign","Input","className","label","htmlFor","id","type","value","onChange","onSubmit","required","Select","optionData","map","option","index","key","name","selectedIndex","event","preventDefault","indexOf","target","onSelect","Textarea","defaultProps","Labels","Status","Priority","getIndex","object","data","checkValue","keyValue","TodoForm","useState","isEditMode","todoData","title","setTitle","description","setDescription","getDate","startDate","setStartDate","endDate","setEndDate","status","statusIndex","setStatusIndex","labelIndex","setLabelIndex","priority","priorityIndex","setPriorityIndex","date","currentDate","Date","Intl","DateTimeFormat","year","month","day","formatToParts","flexDirection","getTime","onUpdate","_id","console","log","onCancel","TodoItem","fontWeight","toISOString","split","onEdit","onDelete","customStyles","content","top","left","marginRight","transform","App","open","setOpen","setTodoData","setEditMode","todoEditData","setTodoEditData","closeModal","a","post","result","fetchTodos","get","params","userId","availableTodos","todo","labelNameIndex","length","sort","b","todoId","delete","deleteStatus","filter","useEffect","getTodos","todoItems","deleteTodo","updateObject","updatedTodo","updatedTodoIndex","updatedTodos","flex","isOpen","onRequestClose","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b72ea5b.chunk.js","sourcesContent":["const axios = require('axios');\r\nclass NetworkClient {\r\n  static sharedInstance = new NetworkClient();\r\n  instance = axios.create({});\r\n  constructor() {\r\n    this.instance = axios.create({\r\n      baseURL: '',\r\n    });\r\n  }\r\n}\r\n\r\nexport default NetworkClient;\r\n","import React from 'react';\r\nimport '../componentscss/Button.css';\r\ninterface P {\r\n  onClick: any;\r\n}\r\nexport default function Button(props: P) {\r\n  return (\r\n    <button\r\n      style={{\r\n        display: 'flex',\r\n        position: 'fixed',\r\n        width: 50,\r\n        height: 50,\r\n        borderRadius: 25,\r\n        background: 'red',\r\n        bottom: 16,\r\n        right: 16,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        userSelect: 'none',\r\n        border: 0,\r\n        outline: 'none',\r\n      }}\r\n      onClick={props.onClick}\r\n    >\r\n      <label style={{ fontSize: 30, color: 'white', textAlign: 'center' }}>\r\n        +\r\n      </label>\r\n    </button>\r\n  );\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport '../componentscss/Input.css';\r\nimport { InputInterface } from '../util/InputInterface';\r\ninterface P extends InputInterface {\r\n  value?: string;\r\n  required?: boolean;\r\n}\r\nexport default function Input(props: P) {\r\n  return (\r\n    <div className=\"container\">\r\n      {props.label ? (\r\n        <label htmlFor={props.id}>{props.label}</label>\r\n      ) : (\r\n        <Fragment />\r\n      )}\r\n      <input\r\n        type={props.type}\r\n        id={props.value}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n        onClick={props.onClick}\r\n        onSubmit={props.onSubmit}\r\n        required={props.required}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport '../componentscss/Select.css';\r\ninterface P {\r\n  label: string;\r\n  id: string;\r\n  optionData: Array<OptionData>;\r\n  selectedIndex: number;\r\n  onSelect: (index: number) => void; // ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;\r\n}\r\n\r\ninterface OptionData {\r\n  value: string;\r\n  name: string;\r\n}\r\nexport default function Select(props: P) {\r\n  const optionData = props.optionData.map((option, index) => (\r\n    <option key={index} value={option.value}>\r\n      {option.name}\r\n    </option>\r\n  ));\r\n  return (\r\n    <div className=\"container\">\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      <select\r\n        name={props.label}\r\n        id={props.id}\r\n        value={props.optionData[props.selectedIndex].value}\r\n        onChange={(event) => {\r\n          event.preventDefault();\r\n          let index = props.optionData\r\n            .map((option) => option.value)\r\n            .indexOf(event.target.value);\r\n          props.onSelect(index);\r\n        }}\r\n      >\r\n        {optionData}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport '../componentscss/Textarea.css';\r\ninterface P {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n  required: boolean;\r\n}\r\nexport default function Textarea(props: P) {\r\n  return (\r\n    <div className=\"container\">\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      <textarea\r\n        id={props.id}\r\n        onChange={props.onChange}\r\n        required={props.required}\r\n        value={props.value}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nTextarea.defaultProps = {\r\n  required: false,\r\n};\r\n","import { KeyValue } from '.';\r\n\r\nconst Labels: Array<KeyValue> = [\r\n  { value: 'OTHER', name: 'Other' },\r\n  {\r\n    value: 'SHOPPING',\r\n    name: 'Shopping',\r\n  },\r\n  {\r\n    value: 'WORK',\r\n    name: 'Work',\r\n  },\r\n  {\r\n    value: 'PERSONAL',\r\n    name: 'Personal',\r\n  },\r\n];\r\n\r\nexport { Labels };\r\n","import { KeyValue } from '.';\r\n\r\nconst Status: Array<KeyValue> = [\r\n  { value: 'NEW', name: 'New' },\r\n  {\r\n    value: 'INPROGRESS',\r\n    name: 'Inprogress',\r\n  },\r\n  {\r\n    value: 'COMPLETED',\r\n    name: 'Completed',\r\n  },\r\n];\r\nexport { Status };\r\n","import { KeyValue } from '.';\r\n\r\nconst Priority: Array<KeyValue> = [\r\n  { value: 'LOW', name: 'Low' },\r\n  {\r\n    value: 'MEDIUM',\r\n    name: 'Medium',\r\n  },\r\n  {\r\n    value: 'HIGH',\r\n    name: 'High',\r\n  },\r\n];\r\n\r\nexport { Priority };\r\n","import { Labels } from './Labels';\r\nimport { Status } from './Status';\r\nimport { Priority } from './Priority';\r\nexport interface KeyValue {\r\n  name: string;\r\n  value: string;\r\n}\r\nfunction getIndex(\r\n  object: Array<KeyValue>,\r\n  data: string,\r\n  checkValue: boolean = false\r\n) {\r\n  return object\r\n    .map((keyValue) => (checkValue ? keyValue.name : keyValue.value))\r\n    .indexOf(data);\r\n}\r\nexport { Labels, Status, Priority, getIndex };\r\n","import React, { useState } from 'react';\r\nimport { Input, Select } from '../components';\r\nimport Textarea from '../components/uicomponents/Textarea';\r\nimport { Labels, Status, Priority, getIndex } from '../util';\r\nimport { Todo } from '../util/Todo';\r\ninterface P {\r\n  onSubmit: any;\r\n  isEditMode: boolean;\r\n  onUpdate: (_id: string, todoData: Partial<Todo>) => void;\r\n  todoData?: Todo;\r\n  onCancel: () => void;\r\n}\r\nexport default function TodoForm(props: P) {\r\n  const [title, setTitle] = useState(\r\n    props.isEditMode ? props.todoData!.title : ''\r\n  );\r\n  const [description, setDescription] = useState(\r\n    props.isEditMode ? props.todoData!.description : ''\r\n  );\r\n  const [startDate, setStartDate] = useState(\r\n    props.isEditMode ? getDate(props.todoData!.startDate) : getDate()\r\n  );\r\n  const [endDate, setEndDate] = useState(\r\n    props.isEditMode ? getDate(props.todoData!.endDate) : getDate()\r\n  );\r\n  const [statusIndex, setStatusIndex] = useState(\r\n    props.isEditMode ? getIndex(Status, props.todoData!.status, true) : 0\r\n  );\r\n  const [labelIndex, setLabelIndex] = useState(\r\n    props.isEditMode ? getIndex(Labels, props.todoData!.label, true) : 0\r\n  );\r\n  const [priorityIndex, setPriorityIndex] = useState(\r\n    props.isEditMode ? getIndex(Priority, props.todoData!.priority, true) : 0\r\n  );\r\n\r\n  function resetFormValues() {\r\n    setTitle('');\r\n    setDescription('');\r\n    setStartDate(getDate());\r\n    setEndDate(getDate());\r\n    setStatusIndex(0);\r\n    setLabelIndex(0);\r\n    setPriorityIndex(0);\r\n  }\r\n  function getDate(date?: number) {\r\n    let currentDate = date ? new Date(date) : new Date();\r\n    const dateTimeFormat = new Intl.DateTimeFormat('en', {\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n    });\r\n    const [\r\n      { value: month },\r\n      ,\r\n      { value: day },\r\n      ,\r\n      { value: year },\r\n    ] = dateTimeFormat.formatToParts(currentDate);\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n\r\n  function onSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n    let todoData: Partial<Todo> = {\r\n      title: title,\r\n      description: description,\r\n      status: Status[statusIndex].value,\r\n      startDate: new Date(startDate).getTime(),\r\n      endDate: new Date(endDate).getTime(),\r\n      label: Labels[labelIndex].value,\r\n      priority: Priority[priorityIndex].value,\r\n    };\r\n    if (props.isEditMode) {\r\n      props.onUpdate(props.todoData!._id!, todoData);\r\n    } else {\r\n      props.onSubmit(todoData);\r\n    }\r\n  }\r\n  return (\r\n    <form\r\n      style={{ display: 'flex', flexDirection: 'column' }}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Input\r\n        type=\"text\"\r\n        id=\"title\"\r\n        label=\"Title\"\r\n        value={title}\r\n        onChange={(event) => {\r\n          event.preventDefault();\r\n          console.log(event);\r\n          setTitle(event.target.value);\r\n        }}\r\n        required={true}\r\n      />\r\n      <Textarea\r\n        id=\"description\"\r\n        label=\"Description\"\r\n        value={description}\r\n        onChange={(event) => {\r\n          event.preventDefault();\r\n          setDescription(event.target.value);\r\n        }}\r\n        required={true}\r\n      />\r\n      <Select\r\n        label=\"Status\"\r\n        id=\"status\"\r\n        selectedIndex={statusIndex}\r\n        onSelect={(index) => setStatusIndex(index)}\r\n        optionData={Status}\r\n      />\r\n      <Select\r\n        label=\"Priority\"\r\n        id=\"priority\"\r\n        selectedIndex={priorityIndex}\r\n        onSelect={(index) => setPriorityIndex(index)}\r\n        optionData={Priority}\r\n      />\r\n      <Select\r\n        label=\"Label\"\r\n        id=\"label\"\r\n        selectedIndex={labelIndex}\r\n        onSelect={(index) => setLabelIndex(index)}\r\n        optionData={Labels}\r\n      />\r\n      <Input\r\n        type=\"date\"\r\n        id=\"startDate\"\r\n        label=\"Start Date\"\r\n        value={startDate}\r\n        onChange={(event) => {\r\n          event.preventDefault();\r\n          setStartDate(event.target.value);\r\n        }}\r\n        required={true}\r\n      />\r\n      <Input\r\n        type=\"date\"\r\n        id=\"endDate\"\r\n        label=\"End Date\"\r\n        value={endDate}\r\n        onChange={(event) => {\r\n          event.preventDefault();\r\n          setEndDate(event.target.value);\r\n        }}\r\n        required={true}\r\n      />\r\n      <div className=\"saveResetContainer\">\r\n        <Input\r\n          type=\"reset\"\r\n          value=\"Clear\"\r\n          onClick={() => {\r\n            resetFormValues();\r\n            return true;\r\n          }}\r\n        />\r\n        <Input type=\"button\" value=\"Cancel\" onClick={props.onCancel} />\r\n        <Input type=\"submit\" value=\"Save\" />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { MdDateRange, MdEdit, MdDelete } from 'react-icons/md';\r\nimport '../componentscss/TodoItem.css';\r\ninterface P {\r\n  title?: string;\r\n  id?: string;\r\n  description?: string;\r\n  status?: string;\r\n  label?: string;\r\n  priority?: string;\r\n  startDate?: number;\r\n  endDate?: number;\r\n  onDelete?: any;\r\n  onEdit?: () => void;\r\n}\r\nexport default function TodoItem(props: P) {\r\n  return (\r\n    <div className=\"todoContainer\">\r\n      <label className=\"title\">{props.title}</label>\r\n      <label>{props.description}</label>\r\n      <div className=\"dateContainer\">\r\n        <label>\r\n          <span style={{ fontWeight: 'bold' }}>\r\n            <MdDateRange />\r\n          </span>\r\n          : {new Date(props.startDate!).toISOString().split('T')[0]}{' '}\r\n          <span style={{ fontWeight: 'bold' }}>~</span>\r\n          {new Date(props.endDate!).toISOString().split('T')[0]}\r\n        </label>\r\n      </div>\r\n      <div className=\"todoDetails\">\r\n        <label>\r\n          <span className=\"title\">Status</span>: {props.status}\r\n        </label>\r\n        <label>\r\n          <span className=\"title\">Priority</span>: {props.priority}\r\n        </label>\r\n        <label>\r\n          <span className=\"title\">Label</span>: {props.label}\r\n        </label>\r\n      </div>\r\n      <div className=\"actionContainer\">\r\n        <div className=\"btn\" title=\"Edit\" onClick={props.onEdit}>\r\n          <MdEdit />\r\n        </div>\r\n        <div className=\"btn\" title=\"Delete\" onClick={props.onDelete}>\r\n          <MdDelete />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTodoItem.defaultProps = {\r\n  title: 'Sample Todo',\r\n  description: 'Todo describing essentials of Todo',\r\n  status: 'New',\r\n  priority: 'Low',\r\n  label: 'Shopping',\r\n  startDate: 1587859200000,\r\n  endDate: 1587859200000,\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport Modal from 'react-modal';\nimport NetworkClient from './lib/NetworkClient';\nimport './App.css';\nimport { Button } from './components';\nimport TodoForm from './screens/TodoForm';\nimport { Todo } from './util/Todo';\nimport TodoItem from './components/uicomponents/TodoItem';\nimport { Labels, Priority, Status, getIndex } from './util';\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\nfunction App() {\n  const [open, setOpen] = useState(false);\n  const [todoData, setTodoData] = useState<Array<Todo>>([]);\n  const [isEditMode, setEditMode] = useState(false);\n  const [todoEditData, setTodoEditData] = useState<Todo>();\n  function onClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    event.preventDefault();\n    setOpen(true);\n  }\n  function closeModal() {\n    setOpen(false);\n  }\n\n  async function onSubmit(todoData: Partial<Todo>) {\n    console.log('Will save todo');\n    try {\n      const result = await NetworkClient.sharedInstance.instance.post(\n        '/saveTodo',\n        todoData\n      );\n      console.log('Status of save', result);\n      await fetchTodos();\n      setOpen(false);\n    } catch (err) {\n      console.log('Error in saving : ' + err);\n    }\n  }\n  async function fetchTodos() {\n    try {\n      let availableTodos = await NetworkClient.sharedInstance.instance.get(\n        '/getTodos',\n        {\n          params: {\n            userId: 'nrajan066',\n          },\n        }\n      );\n      availableTodos = availableTodos.data.data;\n      availableTodos = availableTodos.map((todo: Todo) => {\n        let labelNameIndex = getIndex(Labels, todo.label);\n        todo.label = Labels[labelNameIndex].name;\n        let priorityIndex = getIndex(Priority, todo.priority);\n        todo.priority = Priority[priorityIndex].name;\n        let statusIndex = getIndex(Status, todo.status);\n        todo.status = Status[statusIndex].name;\n        return todo;\n      });\n      if (availableTodos.length > 0) {\n        availableTodos.sort((a: Todo, b: Todo) => a.startDate - b.startDate);\n      }\n      setTodoData(availableTodos);\n      console.log(availableTodos);\n    } catch (err) {\n      console.log('Error occurred in fetching: ', err);\n    }\n  }\n  useEffect(() => {\n    async function getTodos() {\n      try {\n        let availableTodos = await NetworkClient.sharedInstance.instance.get(\n          '/getTodos',\n          {\n            params: {\n              userId: 'nrajan066',\n            },\n          }\n        );\n        availableTodos = availableTodos.data.data;\n        availableTodos = availableTodos.map((todo: Todo) => {\n          let labelNameIndex = getIndex(Labels, todo.label);\n          todo.label = Labels[labelNameIndex].name;\n          let priorityIndex = getIndex(Priority, todo.priority);\n          todo.priority = Priority[priorityIndex].name;\n          let statusIndex = getIndex(Status, todo.status);\n          todo.status = Status[statusIndex].name;\n          return todo;\n        });\n        if (availableTodos.length > 0) {\n          availableTodos.sort((a: Todo, b: Todo) => b.startDate - a.startDate);\n        }\n        setTodoData(availableTodos);\n      } catch (err) {\n        console.log('Error occurred in fetching: ', err);\n      }\n    }\n    getTodos();\n  }, []);\n  async function deleteTodo(todoId: string) {\n    try {\n      let deleteStatus = await NetworkClient.sharedInstance.instance.delete(\n        '/deleteTodo',\n        {\n          params: {\n            todoId,\n          },\n        }\n      );\n      console.log(deleteStatus);\n      let availableTodos = todoData.filter((todo) => todo._id !== todoId);\n      setTodoData(availableTodos);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  const todoItems = todoData.map((todo) => (\n    <TodoItem\n      {...todo}\n      key={todo._id!}\n      onDelete={() => deleteTodo(todo._id!)}\n      onEdit={() => {\n        setEditMode(true);\n        setTodoEditData(todo);\n        setOpen(true);\n      }}\n    />\n  ));\n  async function onUpdate(todoId: string, updateObject: Partial<Todo>) {\n    try {\n      let updatedTodo = await NetworkClient.sharedInstance.instance.post(\n        '/updateTodo',\n        {\n          todoId,\n          updateObject,\n        }\n      );\n      let updatedTodoIndex = todoData.map((todo) => todo._id).indexOf(todoId);\n      let updatedTodos = todoData;\n      updatedTodo = updatedTodo.data.data;\n      updatedTodo.label = Labels[getIndex(Labels, updatedTodo.label)].name;\n      updatedTodo.priority =\n        Priority[getIndex(Priority, updatedTodo.priority)].name;\n      updatedTodo.status = Status[getIndex(Status, updatedTodo.status)].name;\n      updatedTodos[updatedTodoIndex] = updatedTodo;\n      setTodoData(updatedTodos);\n    } catch (err) {\n      console.log(err);\n    }\n    setOpen(false);\n  }\n  return (\n    <div className=\"App\" style={{ display: 'flex', justifyContent: 'center' }}>\n      <div\n        style={{\n          display: 'flex',\n          flex: 1,\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        {todoItems}\n      </div>\n      <Button onClick={onClick} />\n      <Modal isOpen={open} onRequestClose={closeModal} style={customStyles}>\n        <TodoForm\n          onSubmit={onSubmit}\n          isEditMode={isEditMode}\n          todoData={todoEditData}\n          onUpdate={onUpdate}\n          onCancel={closeModal}\n        />\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}